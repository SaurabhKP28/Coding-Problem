Length of Longest pandromic substring
Problem Statement:

Given a string s, find the length of longest palindromic substring in s.

A palindrome is a string that reads the same backward as forward.



Solve it in O(N^2) Time Complexity.



Constraints:

1 <= s.length <= 1000
s consists of only digits and English letters.


Examples:

Example 1:

Input: s = "babad"

Output: 3

Explanation: "bab" & "aba" both are the valid palindromic substring with length 3.



Example 2:

Input: s = "cbbd"

Output: 2

Explanation: The longest palindromic substring is "bb" having length 2.
====================================================================================================================================================================================================================
====================================================================================================================================================================================================================
Solution
====================================================================================================================================================================================================================

class Solution {
    public int longestPandromicSubstring(String s) {
         int n = s.length();
        if (n == 0) return 0;

        int maxLength = 1;  // Minimum length of a palindrome is 1
        int start = 0;

        // Function to expand around the center and find the longest palindrome
        for (int i = 0; i < n; i++) {
            // Odd length palindromes
            int len1 = expandAroundCenter(s, i, i);
            // Even length palindromes
            int len2 = expandAroundCenter(s, i, i + 1);

            // Find the maximum length from both cases
            int len = Math.max(len1, len2);

            // Update the start and maxLength if a longer palindrome is found
            if (len > maxLength) {
                maxLength = len;
                start = i - (len - 1) / 2;
            }
        }

        // Return the length of the longest palindromic substring
        return maxLength;
    }

    // Function to expand around center and return the length of the palindrome
    private int expandAroundCenter(String s, int left, int right) {
        // Expand as long as the characters on both sides are the same
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        // Return the length of the palindrome
        return right - left - 1;
    }
    }
