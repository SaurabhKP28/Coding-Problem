Given n non-negative integers representing an elevation map where the width of each bar is 1,
compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array
[0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105
*******************
class Solution {
    public int trap(int[] height) {
        int n = height.length; // Use length for arrays instead of size()
int water = 0;         // Initialize the total trapped water volume
Stack<Integer> stack = new Stack<>(); // Stack to store indices of height elements

// Iterate through the heights
for (int right = 0; right < n; right++) {
    // Process each height to trap water
    while (!stack.isEmpty() && height[stack.peek()] < height[right]) {
        // If the current height is greater than the height at the top of the stack
        int mid = stack.pop(); // Get the index of the height at the top of the stack
        // If the stack becomes empty, no more water can be trapped
        if (stack.isEmpty())
            break;
        int left = stack.peek();                                      // Get the index of the next height from the top of the stack
        int minHeight = Math.min(height[right] - height[mid], height[left] - height[mid]); // Calculate the minimum height of the two borders
        int width = right - left - 1;                                 // Calculate the width between the left and right borders
        water += minHeight * width;                                   // Calculate the trapped water volume and add it to the total
    }
    stack.push(right); // Push the current index onto the stack
}

// Return the total trapped water volume
return water;
    }
}

//========== User's Code Ends Here ==========



public class Main
{
   
   
     public static void main(String[]args)
    {
        Scanner sc=new Scanner(System.in);
        int n =sc.nextInt();
        Solution s = new Solution();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        
        int max= s.trap(arr);
        System.out.println(max);
    }
}
