1588. Sum of All Odd Length Subarrays
Easy

3723

306

Add to List

Share
Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58
Example 2:

Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.
Example 3:

Input: arr = [10,11,12]
Output: 66
 

Constraints:

1 <= arr.length <= 100
1 <= arr[i] <= 1000
=============================================================================================================================================================
=============================================================================================================================================================

Solution
========
class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int totalSum = 0;
        int n = arr.length;

        // Calculate the sum contribution of each element
        for (int i = 0; i < n; i++) {
            // Calculate the number of subarrays in which arr[i] appears
            int end = n - i;          // Number of subarrays ending at or after i
            int start = i + 1;        // Number of subarrays starting at or before i
            int totalSubarrays = start * end; // Total subarrays including arr[i]
            
            // Calculate the number of odd-length subarrays including arr[i]
            int oddSubarrays = (totalSubarrays + 1) / 2; // Half of them (rounded up) are odd-length
            
            // Contribution to the total sum
            totalSum += arr[i] * oddSubarrays;
        }

        return totalSum;
    }
}
