6. Permutations
Medium

19427

342

Add to List

Share
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
*******************************************************************************************************************************************************************
*******************************************************************************************************************************************************************
Solution
*******************************************************************************************************************************************************************
class Solution {
    public List<List<Integer>> permute(int[] nums) {

         List<List<Integer>> result = new ArrayList<>();
        permuteHelper(nums, 0, result);
        return result;
    }
         // Function to swap values at two indices
        private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
      // Helper function to generate permutations
    private void permuteHelper(int[] nums, int start, List<List<Integer>> result) {
        // If we've reached the end of the array, add the current permutation
        if (start == nums.length) {
            List<Integer> currentPermutation = new ArrayList<>();
            for (int num : nums) {
                currentPermutation.add(num);
            }
            result.add(currentPermutation);
        } else {
            // Generate permutations by swapping each element
            for (int i = start; i < nums.length; i++) {
                swap(nums, start, i); // Swap the current element with the start element
                permuteHelper(nums, start + 1, result); // Recurse for the next position
                swap(nums, start, i); // Backtrack by swapping back
            }
        }  
    }   
}
