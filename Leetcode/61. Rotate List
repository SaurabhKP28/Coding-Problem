61. Rotate List
Medium

9990

1479

Add to List

Share
Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109
********************************************************************************************************************************************************************
********************************************************************************************************************************************************************
Solution
*******************************************************************************************************************************************************************
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) return head;

    // Find the length of the list and the tail node
    ListNode tail = head;
    int length = 1;
    while (tail.next != null) 
    {
        tail = tail.next;
        length++;
    }

    // Make the list circular
    tail.next = head;

    // Calculate the new head position
    k = k % length;
    int stepsToNewHead = length - k;

    // Break the circular list at the new head
    ListNode newTail = tail;
    while (stepsToNewHead-- > 0) 
    {
        newTail = newTail.next;
    }

    head = newTail.next;
    newTail.next = null;

    return head;
    }
}
