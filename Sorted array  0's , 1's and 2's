Problem Statement:

Given an array nums containing only 0s, 1s, and 2s, your task is to sort the array in ascending order.



Constraints:

1 <= nums.length <= 10^5
nums[i] is either 0, 1, or 2.


Input Format:

An integer n representing the size of the array.
n space-separated integers representing the elements of the array (0s, 1s, and 2s).


Output Format:

Output an array representing the sorted array in ascending order.


Examples:

Input:

Array: 2 0 2 1 1 0

Output : 0 0 1 1 2 2

Explanation: After sorting the array, the elements are arranged in ascending order: [0, 0, 1, 1, 2, 2].

==============================================================================================================================================================================================================
==============================================================================================================================================================================================================
Solution
==============================================================================================================================================================================================================

class Solution {
    public int[] sortArray(int[] nums) {
         int low = 0; // Pointer for 0's
        int mid = 0; 
        int high = nums.length - 1; 

        while (mid <= high) {
            if (nums[mid] == 0) {
                
                swap(nums, low, mid);
                low++;
                mid++;
            } else if (nums[mid] == 1) {
                mid++;
            } else { 
                swap(nums, mid, high);
                high--;
            }
        }
        
        return nums; 
    }

    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
 }


//========== User's Code Ends Here ==
