How many swaps ?

Task Points: 200
Topic

Data Structure and Algo
Task details

You are maintaining a register of students roll numbers which is a array the roll numbers can be in sorted or unsorted manner .

The task is to arrange all the roll numbers in ascending order , Find the number of changes required to do so

that number should be minimum



Example 1:

Input:

 nums = {2, 8, 5, 4}

Output: 1

Explanation: swap 8 with 4.



Input:

 nums = {10, 19, 6, 3, 5}

Output: 2

Explanation: swap 10 with 3 and swap 19 with 5.



Input:

 nums = {10, 19, 6, 5, 3}

Output: 3

Explanation: 

1st - swap 10 with 5

then swap 5 with 19

and then swap 19 with 3.



HINT:-

With Example :- {10,9,6,5,3}

Sort the Array Given to you =>{3,5,6,10,19}
In HashMap store the correct index of an element =>{3:0,5:1,6:2,10:3,19:4)
Now since we know the index we can use the Last technique of rotate array concept. (when there is a cycle count will decrease by 1)
********************************************************************************************************************************************************************************************************************
********************************************************************************************************************************************************************************************************************
Solution
********************************************************************************************************************************************************************************************************************

class Solution {
    public int total_swaps(int[] nums) {
       int n = nums.length, swaps = 0;

    // Create pairs of (number, index) and sort by number
     int[] sortedNums = new int[n];
     for (int i = 0; i < n; i++) 
     {
       sortedNums[i] = nums[i];
     }
    Arrays.sort(sortedNums);

    // Map each number to its sorted index
    HashMap<Integer, Integer> index = new HashMap<>();
    for (int i = 0; i < n; i++) index.put(sortedNums[i], i);

    boolean[] visited = new boolean[n];

    for (int i = 0; i < n; i++) {
        if (visited[i] || index.get(nums[i]) == i) continue;

        int cycleLength = 0, j = i;
        while (!visited[j]) {
            visited[j] = true;
            j = index.get(nums[j]);
            cycleLength++;
        }
        if (cycleLength > 0) swaps += cycleLength - 1;
    }
    return swaps;
    }
}

//========== User's Code Ends Here ==========


public class Main
{
   
   
     public static void main(String[]args)
    {
        Scanner sc=new Scanner(System.in);
        String y=sc.nextLine();
        String n =sc.nextLine();
        Solution s = new Solution();
        String s_arr[]=n.split(" ");
        int arr[]=new int[s_arr.length];
        for(int i=0;i<s_arr.length;i++)
        {
            arr[i]=Integer.parseInt(s_arr[i]);
        }
        
        int max= s.total_swaps(arr);
        
        System.out.println(max);
    }
}
